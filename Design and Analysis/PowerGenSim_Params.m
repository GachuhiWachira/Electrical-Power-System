%% POWER-GENERATIOM-SIM
% Author: Ameya Marakarkandy
% Email: ameya.marakarkandy@gmail.com
% Last Updated: 18/02/2025
%
% Inputs:
% initialTime
% Orbital Parameters(a,e,i,RAAN,w,f)
% Solar Panel Parameters:
% - Efficiency
% - Panel Normal vector [body frame]
% - Panel Area
%
% Outputs:
% Satellite position [ICRF]
% Power Generated by each Panels
% Total Power Generated
% Orbital Average Power (OAP)
%
% Assumptions:
% Circular Orbit (e=0)
% Cylindrical Shadow Model (No Penumbra)

tic;
%% INPUTS

initialTime = datetime(2026,9,26,0,0,0);
initialTimeJD = juliandate(initialTime);

mu = 3.986e14; % Graviational constant of Earth
Re = 6378e03;  % Radius of Earth

% Orbital Parameters
sat.a = Re + 500e03;    % Semi-major axis [m]
sat.e = 0;              % Eccentricity 
sat.i = 50;             % Orbital Inclination [deg]
sat.RAAN = 290;          % Right Ascension of Ascending Node [deg]
sat.w = 0;              % Argument of Perigee [deg]
sat.f = 0;              % True Anomaly [deg]


sat.n =sqrt(mu/(sat.a)^3); % Mean Motion [rad/s]
sat.T = 2*pi/sat.n;        % Orbital Time Period [s]

%%% ATTITUDE DYNAMICS %%%
% Satellite mass
sat.mass = 4;
% Inertia Matrix
sat.Jx = 0.003;
sat.Jy = 0.007;
sat.Jz = 0.008;
sat.Jxz = 0;
sat.Jxy = 0;
sat.Jyz = 0;
sat.J = [sat.Jx,-sat.Jxy,-sat.Jxz;...
        -sat.Jxy,sat.Jy,-sat.Jyz;...
        -sat.Jxz,-sat.Jyz,sat.Jz];

% omega B wrt O in B-frame
sat.p = 0;
sat.q = 0;
sat.r = 0;
sat.omegaBO = [sat.p;sat.q;sat.r];

sat.omegaON = [0;-sat.n;0];

% omega B wrt N in B-frame
sat.omegaBN = sat.omegaBO + sat.omegaON;

initAngle = deg2rad(0);
initAxis = [0;0;0];
sat.quat = [cos(initAngle/2);sin(initAngle/2)*initAxis];

%%% SOLAR PANELS %%%
sat.G = 1300;       % Solar Constant [w/M^2]
sat.eta = 0.25;    % Efficiency of Solar Panels

% Solar Panels (+X,+Y,-Y,-Z)
% np = Panel Normal unit vector in body frame
% Ap = Panel Area [m^2]

% +X
sat.np1 = [0;0;1];
sat.Ap1 = 0.0070;

% +Y
sat.np2 = [0;1;0];
sat.Ap2 = 0.0210;

% -Y
sat.np3 = [0;-1;0];
sat.Ap3 = 0.0210;

% -Z
sat.np4 = [1;0;0];
sat.Ap4 = 0.0210;

sat.SPnormals = [sat.np1, sat.np2, sat.np3,sat.np4];
sat.SPareas = diag([sat.Ap1,sat.Ap2,sat.Ap3,sat.Ap4]);

%% SIMULATION

%model = 'PowerGenSim'; % Perfect Nadir Pointing
model = 'PowerGenSim_Attitude';
open_system(model);
disp('--- Simulation Started ---');
simOut = sim(model);

% Extracting Position for Visualisation
positionTT = timeseries2timetable(simOut.yout{1}.Values);
% Extracting Power Data
powerData = simOut.yout.get('Power');
power = powerData.Values.Data;
time = powerData.Values.Time;

power = squeeze(power)'; 
powerTotal = sum(power,2);

OAP = sum(mean(power,1));

%% VISUALISATION [PLOTS]
% Plot the power of individual panels
% Define the custom labels for each panel
panel_labels = {'+X', '+Y', '-Y', '-Z'};

figure; 
hold on
for i = 1:4
    plot(time,power(:,i), 'Linewidth',1.5,'DisplayName', ['Panel ' panel_labels{i}])
end
plot(time,powerTotal,'r' ,'Linewidth',2,'DisplayName', 'Total Power')
plot(time,OAP*ones(size(time)),'k','Linewidth',1.5,'DisplayName','Orbital Average Power')
hold off;

title('Power v/s Time')
xlabel('Time [s]');
ylabel('Power [W]');
legend(Location="best");
grid on;

%% VISUALISATION [ANIMATION]

% startTime = initialTime;
% stopTime = startTime + seconds(sat.T);
% sampleTime = 1000;
% sc = satelliteScenario(startTime,stopTime,sampleTime);
% 
% SATEL = satellite(sc,positionTT,Name = "Spacecraft");
% 
% % Launch a satellite scenario viewer
% v = satelliteScenarioViewer(sc,CameraReferenceFrame = "Inertial");
% 
% play(sc);

%% DISPLAY OUTPUTS

fprintf('Orbital Average Power(OAP) is %.2f W\n',OAP);
elapsedTime = toc;
disp(['Simulation Runtime: ', num2str(elapsedTime), ' seconds']);
disp('--- Simulation Complete ---');